import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/authOptions";
import prisma from "@/lib/prisma";

// Map friendly timing → Prisma enum
function mapUrgency(u?: string): "ASAP" | "ONE_TO_THREE_MONTHS" | "FLEXIBLE" {
  const t = (u ?? "").toLowerCase();
  if (t.includes("asap") || t.includes("urgent")) return "ASAP";
  if (t.includes("1-3") || t.includes("1_3") || t.includes("one") || t.includes("1 to 3")) {
    return "ONE_TO_THREE_MONTHS";
  }
  // "planning", "flexible", unknown → FLEXIBLE
  return "FLEXIBLE";
}

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions);
    const userId = (session?.user as any)?.id ?? null;

    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const body = await req.json().catch(() => ({}));
    const {
      service,
      postcode,
      urgency,
      description = "",
      photos = [],
      details = {},
      budget = null,
      timeline = null,
      notes = null,
    } = body || {};

    if (!service) {
      return NextResponse.json({ error: "Missing 'service'" }, { status: 400 });
    }

    // Normalise urgency and fold postcode into details JSON to avoid schema mismatches
    const normalisedUrgency = mapUrgency(urgency);
    const detailsJson = { ...(details || {}), postcode };

    // Create lead
    const lead = await prisma.lead.create({
      data: {
        service: String(service),
        userId,
        urgency: normalisedUrgency as any, // enum in Prisma schema
        // Optional fields (will be ignored by Prisma if they don't exist in your schema)
        // Keep TS happy with 'as any' where necessary.
        // @ts-ignore
        description,
        // @ts-ignore
        photos,
        // @ts-ignore
        details: detailsJson,
        // @ts-ignore
        budget,
        // @ts-ignore
        timeline,
        // @ts-ignore
        notes,
      },
      select: { id: true, createdAt: true },
    });

    // Generate reference like BK-12345678
    const ref = `BK-${String(Math.floor(10_000_000 + Math.random() * 89_999_999))}`;

    return NextResponse.json({ id: lead.id, ref }, { status: 201 });
  } catch (err: any) {
    console.error("Lead create error:", err);
    // Surface basic Prisma validation hints as 400, everything else 500
    const msg = String(err?.message || "");
    const isValidation =
      msg.includes("PrismaClientValidationError") ||
      msg.includes("Invalid") ||
      msg.includes("Argument");
    return NextResponse.json(
      { error: "Lead create failed", detail: msg },
      { status: isValidation ? 400 : 500 }
    );
  }
}
