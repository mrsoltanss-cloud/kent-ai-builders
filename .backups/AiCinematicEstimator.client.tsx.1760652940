"use client";

import React, { useEffect, useMemo, useRef, useState } from "react";

type Estimate = { low: number; high: number; rationale?: string };
type ApiResp = { estimate?: Estimate };

function useTween(value: number, duration = 350) {
  const [v, setV] = useState(value);
  const fromRef = useRef(value);
  const startRef = useRef<number | null>(null);
  const toRef = useRef(value);

  useEffect(() => {
    fromRef.current = v;
    toRef.current = value;
    startRef.current = null;
    let raf = 0;
    const step = (t: number) => {
      if (startRef.current == null) startRef.current = t;
      const p = Math.min(1, (t - startRef.current) / duration);
      const eased = 1 - Math.pow(1 - p, 3);
      setV(Math.round(fromRef.current + (toRef.current - fromRef.current) * eased));
      if (p < 1) raf = requestAnimationFrame(step);
    };
    raf = requestAnimationFrame(step);
    return () => cancelAnimationFrame(raf);
  }, [value, duration]);

  return v;
}
const money = (n: number) => "£" + Math.round(n).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

// Base phrases + we’ll merge user-learned ones
const BASE_PHRASES = [
  "Bathroom refit in Tunbridge Wells",
  "New driveway in Sevenoaks",
  "Loft conversion in Maidstone",
  "Roof repair in Ashford",
  "Kitchen renovation in Canterbury",
];

// “Try these” example chips (quick tap = preview)
const EXAMPLES = [
  "Kitchen renovation in Canterbury",
  "Roof repair in Ashford",
  "Extension in Dartford",
  "Loft conversion in Maidstone",
  "Bathroom refit in Tunbridge Wells",
  "Driveway in Sevenoaks",
];

export default function AiCinematicEstimator() {
  // price state
  const [low, setLow] = useState(12000);
  const [mid, setMid] = useState(15000);
  const [high, setHigh] = useState(18000);
  const tlow = useTween(low);
  const tmid = useTween(mid);
  const thigh = useTween(high);

  // typing engine
  const [idx, setIdx] = useState(0);
  const [typed, setTyped] = useState("");
  const [running, setRunning] = useState(true);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // learned phrases (from localStorage)
  const learned = useMemo(() => {
    if (typeof window === "undefined") return [] as string[];
    try {
      const raw = localStorage.getItem("brixel.ai.examples");
      if (!raw) return [];
      const arr = JSON.parse(raw) as string[];
      return Array.isArray(arr) ? arr.slice(0, 5) : [];
    } catch { return []; }
  }, []);

  const phrases = useMemo(() => {
    // Interleave learned phrases every other item for variety
    const mix: string[] = [];
    const a = [...BASE_PHRASES];
    const b = [...learned];
    while (a.length || b.length) {
      if (a.length) mix.push(a.shift()!);
      if (b.length) mix.push(b.shift()!);
    }
    return mix.length ? mix : BASE_PHRASES;
  }, [learned]);

  const phrase = useMemo(() => phrases[idx % phrases.length], [idx, phrases]);

  useEffect(() => {
    if (!running) return;
    setTyped(""); setErr(null);
    const letters = phrase.split("");
    let i = 0, timer: any;
    const tick = () => {
      setTyped(letters.slice(0, i + 1).join(""));
      i++;
      // Slightly variable typing cadence for a more human feel
      const pace = 26 + Math.round(Math.random() * 10);
      if (i < letters.length) {
        timer = setTimeout(tick, pace);
      } else {
        preview(phrase);
        timer = setTimeout(() => setIdx((p) => p + 1), 3600);
      }
    };
    timer = setTimeout(tick, 220);
    return () => clearTimeout(timer);
  }, [phrase, running]);

  async function preview(q: string) {
    try {
      setLoading(true); setErr(null);
      const body = { service: q, details: q };
      const r = await fetch("/api/aiQuote", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      const j: ApiResp = await r.json();
      if (!j?.estimate) throw new Error("No estimate");
      const { low, high } = j.estimate;
      const mid = Math.round((low + high) / 2);
      setLow(low); setMid(mid); setHigh(high);
      remember(q);
    } catch (e: any) {
      setErr(e?.message || "Failed to fetch");
    } finally {
      setLoading(false);
    }
  }

  function remember(q: string) {
    try {
      if (typeof window === "undefined") return;
      const key = "brixel.ai.examples";
      const raw = localStorage.getItem(key);
      const arr = raw ? (JSON.parse(raw) as string[]) : [];
      if (!arr.includes(q)) arr.unshift(q);
      localStorage.setItem(key, JSON.stringify(arr.slice(0, 8)));
    } catch {}
  }

  function tapExample(q: string) {
    setRunning(false);
    setTyped(q);
    preview(q);
  }

  return (
    <div className="rounded-2xl border border-gray-200 bg-white/80 backdrop-blur-sm p-4 sm:p-5 shadow-sm relative overflow-hidden">
      {/* subtle AI pulse overlay */}
      <div className="absolute inset-0 pointer-events-none">
        <div className={`ai-pulse ${loading ? "opacity-70" : "opacity-0"} transition-opacity`} />
      </div>

      <div className="flex items-center justify-between gap-2">
        <div className="text-sm font-medium text-emerald-700 flex items-center gap-2">
          <span className="inline-block h-2 w-2 rounded-full bg-emerald-500 animate-pulse" />
          See how powerful our AI really is
        </div>
        <button
          onClick={() => { setRunning(false); location.href = "/quote/conversational"; }}
          className="px-3 py-1.5 rounded-lg bg-emerald-600 text-white text-xs sm:text-sm hover:bg-emerald-700 transition"
        >
          Try our AI now ➜
        </button>
      </div>

      {/* Type box + preview */}
      <div className="mt-3 flex items-center gap-2">
        <div className="relative grow">
          <input
            readOnly
            value={typed}
            className="w-full rounded-lg border border-gray-300 bg-white pl-3 pr-28 py-2 text-sm"
          />
          <span className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 text-xs">
            <span className="ai-caret">|</span>
          </span>
        </div>
        <button
          onClick={() => preview(typed || phrase)}
          className="px-3 py-2 rounded-lg border text-sm hover:bg-gray-50"
        >
          Preview
        </button>
      </div>

      {/* Example chips */}
      <div className="mt-3 flex items-center gap-2 overflow-x-auto no-scrollbar py-0.5">
        {(learned.length ? [...learned, ...EXAMPLES] : EXAMPLES).slice(0, 8).map((q) => (
          <button
            key={q}
            onClick={() => tapExample(q)}
            className="whitespace-nowrap rounded-full border px-3 py-1 text-xs hover:bg-gray-50"
            aria-label={`Try ${q}`}
          >
            {q}
          </button>
        ))}
      </div>

      {/* Prices */}
      <div className="mt-3 grid grid-cols-3 gap-2 sm:gap-3">
        <PriceCard label="Low" value={tlow} highlight={loading} />
        <PriceCard label="Estimate" value={tmid} highlight={loading} />
        <PriceCard label="High" value={thigh} highlight={loading} />
      </div>

      <div className="mt-2 text-[11px] sm:text-xs text-gray-500">
        Estimated timeline: <b>2–5 weeks</b> · Data from 2,300+ real Kent projects.
        {err ? <span className="text-rose-600 ml-2">(Preview failed — heuristic shown)</span> : null}
      </div>
    </div>
  );
}

function PriceCard({ label, value, highlight }: { label: string; value: number; highlight?: boolean }) {
  return (
    <div className={`rounded-xl border p-3 text-center relative overflow-hidden ${highlight ? "ai-sheen" : ""}`}>
      <div className="text-emerald-700 font-extrabold text-xl sm:text-2xl">{money(value)}</div>
      <div className="text-[11px] sm:text-xs text-gray-500">{label}</div>
    </div>
  );
}
