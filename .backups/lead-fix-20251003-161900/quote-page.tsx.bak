"use client";

import { useEffect, useMemo, useState } from "react";
import ServiceMicroQuestions from "@/components/ServiceMicroQuestions";

type Step = "service" | "postcode" | "timing" | "estimate";

export default function QuotePage() {
  const [step, setStep] = useState<Step>("service");

  // Core fields (existing)
  const [service, setService] = useState<string | null>(null);
  const [postcode, setPostcode] = useState("");
  const [urgency, setUrgency] = useState<string | null>(null);

  // New rich details captured in Step 1 but stored separately
  const [details, setDetails] = useState<Record<string, string>>({});

  const canContinueService = useMemo(() => !!service, [service]);
  const canContinuePostcode = useMemo(() => postcode.trim().length >= 2, [postcode]);
  const canContinueTiming = useMemo(() => !!urgency, [urgency]);

  function nextFromService() {
    // We stay faithful to existing flow: Step 1 -> Step 2 (postcode)
    if (!canContinueService) return;
    setStep("postcode");
  }

  async function submitLead() {
    // Call AI estimate then navigate to success page (existing behavior).
    // We pass richer details into the same API without changing visuals.
    const payload = { service, postcode: postcode.trim(), urgency, details };
    try {
      const [aiRes, leadRes] = await Promise.all([
        fetch("/api/aiQuote", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(payload),
        }),
        fetch("/api/lead", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify(payload),
        }),
      ]);

      if (!aiRes.ok) throw new Error("AI quote failed");
      if (!leadRes.ok) throw new Error("Lead save failed");

      // Assuming success route exists already
      window.location.href = "/quote/success";
    } catch (e) {
      console.error(e);
      alert("Something went wrong. Please try again.");
    }
  }

  // UI helpers reused for the SAME look (buttons/spacing mimic existing)
  const optionBtn = (active: boolean) =>
    `h-10 rounded-md border text-sm px-3 text-left transition ${
      active ? "border-emerald-500 bg-emerald-50 text-emerald-700" : "border-gray-200 hover:border-gray-300"
    }`;

  return (
    <div className="mx-auto max-w-5xl px-4 py-8">
      {/* Headline & subtitle — unchanged */}
      <h1 className="text-3xl md:text-4xl font-extrabold tracking-tight">
        Your instant, AI-powered quote — <span className="text-emerald-600">fair, fast, and</span> <span className="text-emerald-600">guaranteed.</span>
      </h1>
      <p className="mt-2 text-gray-600">
        No pushy sales calls. No guesswork. Just trusted local builders with 10+ years experience.
      </p>

      {/* Two-column layout container (kept) */}
      <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Left: main card (kept) */}
        <div className="md:col-span-2 rounded-2xl border border-gray-200 p-4 md:p-6">
          {/* Minimal progress bar mimic (kept structure) */}
          <div className="h-1 bg-gray-100 rounded">
            <div
              className="h-1 bg-emerald-500 rounded transition-all"
              style={{ width: step === "service" ? "33%" : step === "postcode" ? "66%" : "100%" }}
            />
          </div>

          {/* Step bodies — content only, same layout container */}
          {step === "service" && (
            <div className="mt-6">
              <div className="text-sm text-gray-600 mb-2">Select service type</div>

              {/* Service options grid (kept styling) */}
              <div className="grid grid-cols-2 gap-2">
                {[
                  "Kitchen renovation",
                  "Bathroom refurbishment",
                  "Loft conversion",
                  "House extension",
                  "Roofing",
                  "Plastering",
                  "Electrical",
                  "Plumbing",
                ].map((label) => {
                  const val = label.toLowerCase();
                  const active = service === val;
                  return (
                    <button
                      key={val}
                      type="button"
                      onClick={() => setService(val)}
                      className={optionBtn(active)}
                    >
                      {label}
                    </button>
                  );
                })}
              </div>

              {/* NEW: micro-questions (identical container style, appears under service grid) */}
              <ServiceMicroQuestions
                service={service}
                values={details}
                onChange={(id, value) => setDetails((d) => ({ ...d, [id]: value }))}
              />

              <div className="mt-6 flex justify-end">
                <button
                  type="button"
                  onClick={nextFromService}
                  disabled={!canContinueService}
                  className="h-10 px-4 rounded-md bg-emerald-600 text-white disabled:opacity-40"
                >
                  Next
                </button>
              </div>
            </div>
          )}

          {step === "postcode" && (
            <div className="mt-6">
              <div className="text-sm text-gray-600 mb-2">Enter your postcode</div>
              <input
                value={postcode}
                onChange={(e) => setPostcode(e.target.value.toUpperCase())}
                placeholder="e.g. ME1"
                className="w-full h-10 rounded-md border border-gray-200 px-3"
              />
              <div className="mt-4 flex items-center gap-2">
                <button type="button" onClick={() => setStep("service")} className="text-gray-600 underline">
                  Back
                </button>
                <div className="flex-1" />
                <button
                  type="button"
                  onClick={() => setStep("timing")}
                  disabled={!canContinuePostcode}
                  className="h-10 px-4 rounded-md bg-emerald-600 text-white disabled:opacity-40"
                >
                  Next
                </button>
              </div>
            </div>
          )}

          {step === "timing" && (
            <div className="mt-6">
              <div className="text-sm text-gray-600 mb-2">Choose timing</div>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                {[
                  { v: "ASAP", l: "ASAP" },
                  { v: "1-3 months", l: "1–3 months" },
                  { v: "3-6 months", l: "3–6 months" },
                  { v: "planning", l: "Just planning" },
                ].map((o) => (
                  <button
                    key={o.v}
                    type="button"
                    onClick={() => setUrgency(o.v)}
                    className={optionBtn(urgency === o.v)}
                  >
                    {o.l}
                  </button>
                ))}
              </div>
              <div className="mt-4 flex items-center gap-2">
                <button type="button" onClick={() => setStep("postcode")} className="text-gray-600 underline">
                  Back
                </button>
                <div className="flex-1" />
                <button
                  type="button"
                  onClick={() => setStep("estimate")}
                  disabled={!canContinueTiming}
                  className="h-10 px-4 rounded-md bg-emerald-600 text-white disabled:opacity-40"
                >
                  See instant estimate
                </button>
              </div>
            </div>
          )}

          {step === "estimate" && (
            <div className="mt-6">
              <div className="text-sm text-gray-600 mb-2">Review & submit</div>
              <div className="rounded-md border border-gray-200 p-3 text-sm text-gray-700">
                <div><strong>Service:</strong> {service}</div>
                <div><strong>Postcode:</strong> {postcode}</div>
                <div><strong>Timing:</strong> {urgency}</div>
                {Object.keys(details).length > 0 && (
                  <div className="mt-2">
                    <strong>Details:</strong>
                    <ul className="list-disc ml-5">
                      {Object.entries(details).map(([k, v]) => (
                        <li key={k}>{k}: {v}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
              <div className="mt-4 flex items-center gap-2">
                <button type="button" onClick={() => setStep("timing")} className="text-gray-600 underline">
                  Back
                </button>
                <div className="flex-1" />
                <button
                  type="button"
                  onClick={submitLead}
                  className="h-10 px-4 rounded-md bg-emerald-600 text-white"
                >
                  Submit & get estimate
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Right: trust sidebar (kept placeholder – your existing content renders here) */}
        <div className="rounded-2xl border border-gray-200 p-4 md:p-6">
          <div className="text-sm text-gray-700">Why homeowners choose us</div>
          <ul className="mt-2 space-y-1 text-sm text-gray-600">
            <li>✓ 2,300+ successful projects</li>
            <li>✓ 4.9/5 rating</li>
            <li>✓ £5m Public Liability cover</li>
            <li>✓ 12-month workmanship guarantee</li>
            <li>✓ Verified & DBS-checked teams</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
