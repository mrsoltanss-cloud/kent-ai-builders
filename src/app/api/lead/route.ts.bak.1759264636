import { NextResponse } from "next/server";
import { LeadSchema } from "@/lib/validation/lead";
import { PrismaClient, LeadStatus } from "@prisma/client";

const db = new PrismaClient();

async function deliverToWebhook(lead: any) {
  const url = process.env.SHEETS_WEBHOOK_URL;
  if (!url) return { ok: true, skipped: true };
  let ok = false;
  for (let i=0;i<3;i++){
    try {
      const r = await fetch(url, {
        method: "POST",
        headers: { "content-type": "application/json" },
        body: JSON.stringify(lead),
      });
      ok = r.ok;
      if (ok) return { ok: true };
    } catch (e) {
      // noop; will retry
    }
    await new Promise(r=>setTimeout(r, 1000 * (i+1)));
  }
  return { ok: false };
}

export async function POST(req: Request) {
  const json = await req.json().catch(()=> ({}));
  const parsed = LeadSchema.safeParse(json);
  if (!parsed.success) {
    return NextResponse.json({ ok:false, error:"Invalid payload", issues: parsed.error.format() }, { status: 400 });
  }

  const created = await db.lead.create({ data: parsed.data });

  const result = await deliverToWebhook(created);
  if (result.ok) {
    await db.lead.update({
      where: { id: created.id },
      data: { status: LeadStatus.DELIVERED, deliveredAt: new Date() },
    });
    return NextResponse.json({ ok:true, id: created.id, delivered:true });
  }

  await db.lead.update({
    where: { id: created.id },
    data: { status: LeadStatus.QUEUED },
  });
  return NextResponse.json({ ok:true, id: created.id, delivered:false, queued:true });
}
