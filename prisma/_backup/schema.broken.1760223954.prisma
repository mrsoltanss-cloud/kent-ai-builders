generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

"model Job {

  id             String        @id
  title          String
  summary        String?
  priceMin       Int?
  priceMax       Int?
  tier           JobTier       @default(STANDARD)
  status         JobStatus     @default(OPEN)
  views          Int           @default(0)
  contactUnlocks Int           @default(0)
  allocCap       Int           @default(3)
  aiSeeded       Boolean       @default(false)
  filledAt       DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  visibleUntil   DateTime?     @db.Timestamptz(6)
  JobIntro       JobIntro[]
  JobTradeTag    JobTradeTag[]
  aiSummary   String?
  visibleUntil DateTime?
  filledAt     DateTime?
  heatScore    Int? @default(0)
  description  String?
  postcode     String?
}"

model JobIntro {
  id          String   @id
  jobId       String
  builderId   String?
  fingerprint String
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  Job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([jobId, fingerprint])
}

model JobTradeTag {
  jobId    String
  tradeId  String
  Job      Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  TradeTag TradeTag @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@id([jobId, tradeId])
}

model Lead {
  id             String     @id
  userId         String?
  service        String
  scope          String?
  rooms          Int?
  sqm            Int?
  propertyAge    Int?
  urgency        Urgency
  timeline       String?
  status         LeadStatus @default(NEW)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  postcode       String
  aiEstimateHigh Int?
  aiEstimateLow  Int?
  aiNotes        String?
  budgetMax      Int?
  budgetMin      Int?
  consent        Boolean    @default(false)
  contactEmail   String?
  contactName    String?
  contactPhone   String?
  User           User?      @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TradeTag {
  id          String        @id
  key         String        @unique
  label       String
  JobTradeTag JobTradeTag[]
}

model User {
  id            String       @id
  email         String?      @unique
  name          String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Lead          Lead[]
  Session       Session[]
  UserProfile   UserProfile?
}

model UserProfile {
  id           String   @id
  userId       String   @unique
  postcode     String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  phone        String?
  timeframe    String?
  propertyType String?
  ownership    String?
  accessNotes  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum JobStatus {
  OPEN
  PAUSED
  CLOSED
}

enum JobTier {
  STANDARD
  QUICKWIN
  PRIORITY
}

enum LeadStatus {
  PENDING
  CONTACTED
  WON
  LOST
  NEW
  QUALIFIED
  CLOSED
}

enum Urgency {
  FLEXIBLE
  SOON
  URGENT
  ASAP
  THIS_MONTH
}
