generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BUILDER
  HOMEOWNER
  USER
}

enum LeadStatus {
  PENDING
  CONTACTED
  WON
  LOST
}

enum Urgency {
  FLEXIBLE
  SOON
  URGENT
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  role          Role      @default(HOMEOWNER)
  isBlocked     Boolean   @default(false)
  blockedAt     DateTime?
  blockedReason String?
  // Keep the column if it exists in DB; it's optional in the app
  passwordHash  String?   @map("passwordHash")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  leads       Lead[]
  auditActor  AuditLog[]   @relation("actor")
  auditTarget AuditLog[]   @relation("target")
  UserProfile UserProfile?
}

model Lead {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  service     String
  scope       String?
  rooms       Int?
  sqm         Int?
  propertyAge Int?
  urgency     Urgency
  budget      Int?
  timeline    String?
  notes       String?
  status      LeadStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String?
  photos      Json?
  details     Json?
}

model AuditLog {
  id     String   @id @default(cuid())
  // Map Prisma field `ts` to existing DB column `createdAt`
  ts     DateTime @default(now()) @map("createdAt")
  action String

  // who did it
  actor   User?   @relation("actor", fields: [actorId], references: [id])
  actorId String?

  // which user it was about (optional)
  target   User?   @relation("target", fields: [targetId], references: [id])
  targetId String?

  // optional lead target
  leadId String?

  meta Json?

  @@index([ts])
  @@index([action])
  @@index([actorId])
  @@index([targetId])
}

/// --- Progressive profile captured right after signup ---
model UserProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  postcode     String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  phone        String?
  timeframe    String? // e.g. "ASAP" | "2â€“4 weeks" | "Flexible"
  propertyType String? // e.g. "House" | "Flat" | "Bungalow"
  ownership    String? // e.g. "Owner" | "Landlord" | "Tenant"
  accessNotes  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


/// --- Core job models powering /my-live ---
model Job {
  id           String   @id @default(cuid())
  userId       String
  title        String
  status       String   @default("draft") // draft|active|scheduled|in_progress|done|cancelled
  budgetLow    Int?
  budgetHigh   Int?
  postcode     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     JobMessage[]
  appointments JobAppointment[]
  attachments  JobAttachment[]
}

model JobMessage {
  id        String   @id @default(cuid())
  jobId     String
  userId    String?
  role      String   @default("user") // user|assistant|system|agent
  content   String
  createdAt DateTime @default(now())

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model JobAppointment {
  id        String   @id @default(cuid())
  jobId     String
  title     String
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobAttachment {
  id        String   @id @default(cuid())
  jobId     String
  name      String
  url       String
  type      String? // mime
  size      Int?
  createdAt DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}
