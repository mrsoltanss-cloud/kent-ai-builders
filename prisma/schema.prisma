generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum LeadStatus {
  NEW
  PENDING
  QUOTED
  CLOSED
}

enum Urgency {
  FLEXIBLE
  SOON
  URGENT
}

enum UserRole {
  BUILDER
  CUSTOMER
  ADMIN
}

enum ProfileStatus {
  DRAFT
  APPROVED
}

//
// Core Models (existing + indexes)
//
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  image         String?
  role          UserRole        @default(BUILDER)
  leads         Lead[]
  profile       BuilderProfile?
  createdAt     DateTime        @default(now())
  PortfolioItem PortfolioItem[]
}

model Lead {
  id          String     @id @default(cuid())
  service     String
  scope       String?
  rooms       Int?
  sqm         Int?
  urgency     Urgency
  budget      String?
  timeline    String?
  contact     String
  aiQuote     Json?
  status      LeadStatus @default(PENDING)
  userId      String?
  user        User?      @relation(fields: [userId], references: [id])
  attachments Json?
  createdAt   DateTime   @default(now())

  @@index([status])
  @@index([createdAt])
}

model Job {
  id             String    @id @default(uuid())
  title          String
  summary        String?
  priceMin       Int?
  priceMax       Int?
  tier           String?
  status         String?
  views          Int?      @default(0)
  allocCap       Int?      @default(3)
  contactUnlocks Int?      @default(0)
  aiSeeded       Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  visibleUntil   DateTime?

  @@index([visibleUntil])
  @@index([createdAt])
}

//
// New: Builder Profile (powers onboarding + public page)
//
model BuilderProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Brand & Identity
  company         String
  phone           String
  yearsExperience Int?
  logoUrl         String?
  bio             String? // 160–240 chars suggested
  slug            String  @unique

  // Services & Coverage
  tradeTypes   String[] // e.g., ["General Builder","Tiling"]
  services     String[] // Detailed service list
  minJobValue  Int? // in GBP
  maxJobValue  Int? // in GBP
  availability String? // "Immediate" | "2–4 weeks" | etc.
  postcodeBase String
  radiusKm     Int? // 5–50
  areas        String[] // e.g., ["Canterbury","Maidstone"]

  // Portfolio & Trust
  portfolio      Json? // [{title, category, budgetBand, photos[], beforeAfterPairs[], description}]
  certifications String[] // e.g., ["NICEIC","Gas Safe"]
  hasInsurance   Boolean  @default(false)
  insuranceCover String? // e.g., "£1m", "£5m"

  // Notifications & Preferences
  notifications Json? // { email: bool, whatsapp: bool, quietHours: {start,end} }

  // Lifecycle
  profileStatus ProfileStatus @default(DRAFT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([profileStatus])
  @@index([postcodeBase])
}

// ===== Portfolio v0 =====
model PortfolioItem {
  id          String           @id @default(cuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id])
  title       String
  description String?
  coverUrl    String?
  position    Int              @default(0)
  images      PortfolioImage[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId, position])
}

model PortfolioImage {
  id        String        @id @default(cuid())
  itemId    String
  item      PortfolioItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  url       String
  caption   String?
  position  Int           @default(0)
  createdAt DateTime      @default(now())

  @@index([itemId, position])
}

enum BuilderStatus { DRAFT PENDING_REVIEW ACTIVE REJECTED }

model BuilderProfile {
  id           String        @id @default(cuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  companyName  String?
  phone        String?
  website      String?
  bio          String?
  trades       String[]      @default([])
  postcode     String?
  radiusMiles  Int?
  lat          Float?
  lng          Float?
  completeness Int            @default(0)
  status       BuilderStatus  @default(DRAFT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  portfolio    PortfolioItem[]
  documents    VerificationDocument[]
}

model PortfolioItem {
  id         String   @id @default(cuid())
  builderId  String
  builder    BuilderProfile @relation(fields: [builderId], references: [id])
  imageUrl   String
  caption    String?
  order      Int       @default(0)
  visibility String    @default("PRIVATE") // PRIVATE | PUBLIC
  createdAt  DateTime  @default(now())
}

enum VerificationType { INSURANCE ID CERT }
enum VerificationStatus { UPLOADED UNDER_REVIEW APPROVED REJECTED }

model VerificationDocument {
  id         String             @id @default(cuid())
  builderId  String
  builder    BuilderProfile     @relation(fields: [builderId], references: [id])
  type       VerificationType
  fileUrl    String
  filename   String?
  mimeType   String?
  size       Int?
  status     VerificationStatus @default(UPLOADED)
  reviewedBy String?
  reviewedAt DateTime?
  reason     String?
  createdAt  DateTime           @default(now())
}
