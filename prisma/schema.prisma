generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum LeadStatus {
  PENDING
  CONTACTED
  WON
  LOST
}

enum Urgency {
  FLEXIBLE
  SOON
  URGENT
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          Role      @default(USER)
  isBlocked     Boolean   @default(false)
  blockedAt     DateTime?
  blockedReason String?
  // Keep the column if it exists in DB; it's optional in the app
  passwordHash  String?   @map("passwordHash")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  leads       Lead[]
  auditActor  AuditLog[] @relation("actor")
  auditTarget AuditLog[] @relation("target")
}

model Lead {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  service     String
  scope       String?
  rooms       Int?
  sqm         Int?
  propertyAge Int?
  urgency     Urgency
  budget      Int?
  timeline    String?
  notes       String?
  status      LeadStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model AuditLog {
  id     String   @id @default(cuid())
  // Map Prisma field `ts` to existing DB column `createdAt`
  ts     DateTime @default(now()) @map("createdAt")
  action String

  // who did it
  actor   User?   @relation("actor", fields: [actorId], references: [id])
  actorId String?

  // which user it was about (optional)
  target   User?   @relation("target", fields: [targetId], references: [id])
  targetId String?

  // optional lead target
  leadId String?

  meta Json?

  @@index([ts])
  @@index([action])
  @@index([actorId])
  @@index([targetId])
}
